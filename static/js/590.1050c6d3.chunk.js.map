{"version":3,"file":"static/js/590.1050c6d3.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/Avengers.png';\r\nimport avengersLogo from '../../resources/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","const ErrorMessage = () => {\r\n  return(\r\n    <h2 style={{textAlign: 'center', color: '#fff'}}>Error</h2>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport './comicsList.scss';\r\n\r\n// Функция setContent скопирована в компонент, так как она должно быть изменено состояние загрузка в части подгрузки новых карточек\r\n\r\nconst setContent = (marvelProcess, Component, newItemLoading) => {\r\n    switch(marvelProcess) {\r\n      case 'waiting':\r\n        return <Spinner/>;\r\n      case 'loading':\r\n        return newItemLoading ? <Component/> : <Spinner/>;\r\n      case 'confirmed':\r\n        return <Component/>\r\n      case 'error':\r\n        return <ErrorMessage/>;\r\n      default:\r\n        throw new Error('Unexpected procces state');\r\n    }\r\n  }\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]),\r\n          [offset, setOffset] = useState(1000),\r\n          [newItemLoading, setNewItemLoading] = useState(false),\r\n          [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const {getAllComics, marvelProcess, setMarvelProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n            .then(() => setMarvelProcess('confirmed'))\r\n    }\r\n\r\n    const onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if(newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList])\r\n        setNewItemLoading(newItemLoading => false)\r\n        setOffset(offset => offset + 8)\r\n        setComicsEnded(comicsEnded => ended)\r\n    }\r\n\r\n    const renderItems = (arr) => {\r\n        const items = arr.map((item) => {\r\n            return (\r\n                <CSSTransition key={item.id} timeout={300} classNames=\"comics__item\">\r\n                    <li\r\n                        className=\"comics__item\"\r\n                        key={item.id}>\r\n                        <Link to={`${item.id}`}>\r\n                            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\r\n                            <div className=\"comics__item-name\">{item.title}</div>\r\n                            <div className=\"comics__item-price\">{item.price}</div>\r\n                        </Link>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n          });\r\n\r\n          return (\r\n            <TransitionGroup className=\"comics__grid\">\r\n                {items}\r\n            </TransitionGroup>\r\n          )\r\n    }\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n\r\n            {setContent(marvelProcess, () => renderItems(comicsList), newItemLoading)}\r\n\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': comicsEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n  return(\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Page with list of our comics\"\r\n        />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner/>\r\n      <ComicsList/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const {request, clearError, marvelProcess, setMarvelProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = `apikey=${process.env.REACT_APP_API_KEY}`;\r\n  const _baseOffsetChar = 210;\r\n  const _baseOffsetComics = 1000;\r\n\r\n  const getAllCharacters = async (offset = _baseOffsetChar) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n\r\n    function editDescription(description){\r\n      if(description.length >= 200) {\r\n        description = description.slice(0, 197) + '...';\r\n      }\r\n      return description;\r\n    }\r\n\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: `${char.description ? editDescription(char.description) : \"This character has not description\"}`,\r\n      thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items.length > 10 ? char.comics.items.slice(0, 10) : char.comics.items\r\n    }\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffsetComics) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n    return res.data.results.map(_transformComic)\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n    return _transformComic(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComic = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n      pageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\"\r\n    }\r\n  }\r\n\r\n  return {marvelProcess,\r\n          setMarvelProcess,\r\n          getAllCharacters,\r\n          getCharacterByName,\r\n          getCharacter,\r\n          getAllComics,\r\n          getComic,\r\n          clearError}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [marvelProcess, setMarvelProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setMarvelProcess('loading');\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if(!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch(e) {\r\n      setMarvelProcess('error');\r\n      throw e;\r\n    }\r\n\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => {\r\n    setMarvelProcess('loading');\r\n  }, []);\r\n\r\n  return {request,\r\n          clearError,\r\n          marvelProcess,\r\n          setMarvelProcess}\r\n}"],"names":["_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","style","textAlign","color","setContent","marvelProcess","Component","newItemLoading","Spinner","ErrorMessage","Error","_useState","useState","_useState2","_slicedToArray","comicsList","setComicsList","_useState3","_useState4","offset","setOffset","_useState5","_useState6","setNewItemLoading","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","getAllComics","setMarvelProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","concat","_toConsumableArray","arr","items","map","item","CSSTransition","timeout","classNames","Link","to","id","thumbnail","title","price","TransitionGroup","renderItems","disabled","onClick","_Fragment","Helmet","name","content","AppBanner","ComicsList","_useHttp","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","process","getAllCharacters","res","results","_transformCharacter","getCharacterByName","_ref2","_callee2","_context2","getCharacter","_ref3","_callee3","_context3","_x2","char","description","slice","path","extension","homepage","urls","wiki","comics","_ref4","_callee4","_args4","_context4","_transformComic","getComic","_ref5","_callee5","_context5","_x3","_comics$textObjects$","pageCount","language","textObjects","prices"],"sourceRoot":""}